class Solution {
public:
    string fun(vector<vector<int>>& grid)
    {
        string str="";
        for(int i=0;i<2;++i)
        {  for(int j=0;j<3;++j)
            { if(i==1 && j==2)
                str+=to_string(grid[i][j]);
              else
                str+=(to_string(grid[i][j])+" ");
            }
        }
        return str;
    }
    int slidingPuzzle(vector<vector<int>>& grid) {
        static int a[]={0,0,-1,1};
        static int b[]={-1,1,0,0};
        queue< pair< vector<vector<int>>,int > >q;
        vector<vector<int>> t={{1,2,3},{4,5,0}};
        unordered_set<string>s;
        string ans=fun(t);
        string start=fun(grid);
        if(ans==start)
            return 0;
        s.insert(start);
        q.push({grid,0});
        while(q.empty()==false)
        {   auto t=q.front();
            q.pop();
            int i=0,j=0;
            bool find=false;
            for(i=0;i<2;++i)
            {  for(j=0;j<3;++j)
                {   if(t.first[i][j]==0)
                    {  find=true;
                       break;
                    }
                }
               if(find==true)
                  break;
            }
            for(int k=0;k<4;++k)
            {  int x=i+a[k],y=j+b[k];
               if(x>=0 && x<2 && y>=0 && y<3) 
               {  vector<vector<int>>temp=t.first;
                  swap(temp[i][j],temp[x][y]);
                  string str=fun(temp);
                  if(str==ans)
                      return t.second+1;
                  if(s.find(str)==s.end())
                  {  q.push({temp,t.second+1});
                     s.insert(fun(temp));
                  }
               }
            }
        }
        return -1;
    }
};

class Solution {
    int n;
public:
    int fun(int l,int p,vector<vector<int>>&t,vector<vector<int>>& matrix)
    {   if(l==n)
         return 0;
        if(p!=-1 && t[l][p]!=-1)
            return t[l][p];
        static int a[]={-1,0,1};
        int res=INT_MAX;
        if(p==-1)
        {  for(int i=0;i<n;++i)
             res=min(res,matrix[0][i]+fun(l+1,i,t,matrix));
        }
       else
       {  for(int k=0;k<3;++k)
           {  if(p+a[k]>=0 && p+a[k]<n)
                res=min(res,matrix[l][p+a[k]]+fun(l+1,p+a[k],t,matrix));
           }
       }
      if(p!=-1)
        return t[l][p]=res;
      else
        return res;
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
       this->n=matrix.size();
       vector<vector<int>>t(n,vector<int>(n,-1));
       int res=INT_MAX;
       res=min(res,fun(0,-1,t,matrix));
       return res;
    }
};

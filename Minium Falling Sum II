class Solution {
    int n;
public:
    int fun(int l,int p,vector<vector<int>>&t,vector<vector<int>>& grid)
    {   if(l==n)
          return 0;
        if(p!=-1 && t[l][p]!=-1)
            return t[l][p];
        int res=INT_MAX;
        for(int i=0;i<n;++i)
        {  if(i!=p)
              res=min(res,grid[l][i]+fun(l+1,i,t,grid));
        }
       if(p==-1)
          return res;
       return t[l][p]=res;
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
        this->n=grid.size();
        vector<vector<int>>t(n,vector<int>(n,-1));
        int res=INT_MAX;
        res=min(res,fun(0,-1,t,grid));
        return res;
    }
};

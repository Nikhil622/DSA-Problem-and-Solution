class Solution {
public:
    bool fun(int s,int k,vector<bool>&visited,vector<pair<int,int>>*adj)
     {   if(k<=0)
           return true;
         visited[s]=true;
         for(auto x:adj[s])
         {  if(visited[x.first]==false)
             {  
                 bool t=fun(x.first,k-x.second,visited,adj);
                 if(t==true)
                   return true;
             }
         }
         visited[s]=false;
         return false;
     }
    bool pathMoreThanK(int V, int E, int k, int *a) 
    {    vector<pair<int,int>>adj[V];
         for(int i=0;i<3*E;i=i+3) // Total number of element in a[]  will be 3*E
         {   adj[a[i]].push_back({a[i+1],a[i+2]});
             adj[a[i+1]].push_back({a[i],a[i+2]});
         }
         vector<bool>visited(V,false);
         return fun(0,k,visited,adj); // path always starts with node 0
    } 
};

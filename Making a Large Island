class Solution {
public:
    int DFS(int x,int y,int color,vector<vector<int>>&grid,int n)
    {  static int a[]={-1,1,0,0};
       static int b[]={0,0,-1,1};
       grid[x][y]=color;
       int res=1;
       for(int k=0;k<4;++k)
       {  int i=x+a[k],j=y+b[k];
          if(i>=0 && i<n && j>=0 && j<n && grid[i][j]==1)
           res+=DFS(i,j,color,grid,n);
       }
       return res;
    }
    int largestIsland(vector<vector<int>>& grid) {
        static int a[]={-1,1,0,0};
        static int b[]={0,0,-1,1};
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        unordered_map<int,int>mp;
         int n=grid.size();
         int color=2;
         //vector<vector<bool>>visited(n,vector<bool>(n,false)); // no need for making boolian grid for checking visited or not
         for(int i=0;i<n;++i)
         {
             for(int j=0;j<n;++j)
             {  if(grid[i][j]==1)
                {  int area= DFS(i,j,color,grid,n);
                   if(area==n*n)
                     return area;
                   mp[color++]=area;
                }
             }
         }
        mp[0]=0;
        int res=0;
        for(int i=0;i<n;++i)
         {
             for(int j=0;j<n;++j)
             {  if(grid[i][j]==0)
                {  unordered_set<int> s;  //diff_colors: total different colors island to which edge of that land is 
                   for(int k=0;k<4;++k)
                    {  int x=i+a[k],y=j+b[k];
                       if(x>=0 && x<n && y>=0 && y<n)
                         s.insert(grid[x][y]); 
                    }
                  int temp=0;
                  for(auto color:s)
                   temp+=mp[color];
                   res=max(res,1+temp);
                }
             }
         }
        return res;
    }
};

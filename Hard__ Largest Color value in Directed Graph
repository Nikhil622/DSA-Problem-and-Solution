class Solution {
    stack<int>st;
    vector<int>visited,recur;
public:
    bool isCycle(int s,vector<int>adj[])
    {   visited[s]=recur[s]=true;
        for(int x:adj[s])
        {  if(visited[x]==false)
            {  if(isCycle(x,adj))
                 return true;
            }
           else if(recur[x])
            return true;
        }
        st.push(s);
        recur[s]=false;
        return false;
    }
    vector<int> fun(int s,string &str,vector<vector<int>>&t,vector<int>adj[])
    {    visited[s]=true;
         int cnt=0;
         for(int x:adj[s])
         {   ++cnt;
             if(visited[x]==false)
             {   auto m=fun(x,str,t,adj);
                 if(cnt==1)
                    t[s]=t[x];
                 else
                 {  for(int i=0;i<26;++i)
                      t[s][i]=max(t[s][i],m[i]);
                 }
             }
             else
             {
                   if(cnt==1)
                     t[s]=t[x];
                   else
                     {  for(int i=0;i<26;++i)
                          t[s][i]=max(t[s][i],t[x][i]);
                     }
                 
             }
         }
        t[s][str[s]-'a']+=1;
       return t[s]; 
    }
    int largestPathValue(string s, vector<vector<int>>& edges) {
        int n=s.size();
        visited=vector<int>(n,false);
        recur=vector<int>(n,false);
        vector<int>adj[n];
        for(auto x:edges)
           adj[x[0]].push_back(x[1]);
        for(int i=0;i<n;++i)
        {  if(visited[i]==false && isCycle(i,adj))
              return -1;
        }
        for(int i=0;i<n;++i)
        {
              visited[i]=false;
              recur[i]=false;
        }
        vector<int>vt;
        while(st.empty()==false)
        {  vt.push_back(st.top());
           st.pop();
        }
        vector<vector<int>>t(n,vector<int>(26,0));
        int res=1;
        for(int x:vt)
        {  if(visited[x]==false)
            {  auto vt=fun(x,s,t,adj);
               for(int N:vt)
                 res=max(res,N);
            }
        }
        return res;
    }
};

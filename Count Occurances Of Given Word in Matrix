class Solution{
    public:
    bool isValid(int x,int y,vector<vector<char> > &mat)
    {
        return (x>=0 && x<mat.size() && y>=0 && y<mat[0].size());
    }
    void fun(int idx,int i,int j,int &res,string &s,vector<vector<char> > &mat)
    {   if(idx==s.size()-1 && mat[i][j]==s[idx])
         {   ++res;
             return;
         }
        if(s[idx]!=mat[i][j])
          return;
        static int a[]={-1,1,0,0};
        static int b[]={0,0,-1,1};
        char c=s[idx];
        mat[i][j]='*';   // Changing char at this position to some non-alphabetical character : So that we don't have to use isVisited boolean matrix and saves space
        for(int k=0;k<4;++k)
        { int x=i+a[k],y=j+b[k];
          if(isValid(x,y,mat)==true)
          {   
              fun(idx+1,x,y,res,s,mat);
          }
        }
        mat[i][j]=c;
    }
    int findOccurrence(vector<vector<char> > &mat, string &target){
        int res=0;
        int m=mat.size(),n=mat[0].size();
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {  if(mat[i][j]==target[0])
                 {  
                    fun(0,i,j,res,target,mat);
                 }
            }
        }
        return res;
    }
};

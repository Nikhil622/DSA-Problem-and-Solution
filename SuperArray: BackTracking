void fun(int l,int r,vector<int>&a,int b,int c,int &val,int &res,unordered_map<int,int>&m)
 {   if(b==0)
     {   int n=0;
         for(auto x:m)
         {  if(val<x.second)
              ++n;
         }
        for(int i=l;i<=r;++i)
        {  if(m.find(i)==m.end() && val<a[i])
             ++n;
        }
        if(c<=n)
         ++res;
        return;
     }
    
    if(m.find(l)!=m.end())
     {    m[l]++;
          fun(l,r,a,b-1,c,val,res,m);
          m[l]--;
     }
    else
    {
        m[l]=a[l]+1;
          fun(l,r,a,b-1,c,val,res,m);
        m.erase(l);
    }
    if(m.find(r)!=m.end())
     {    m[r]++;
          fun(l,r,a,b-1,c,val,res,m);
          m[r]--;
     }
    else
    {   m[r]=a[r]+1;
         fun(l,r,a,b-1,c,val,res,m);
        m.erase(r);
    }
    if(m.find(l)!=m.end())
     {   int x=m[l];
         m.erase(l);
         fun(l+1,r,a,b-1,c,val,res,m);
         m[l]=x;
     }
    else{
       fun(l+1,r,a,b-1,c,val,res,m);
    }
    if(m.find(r)!=m.end())
     {   int x=m[r];
         m.erase(r);
         fun(l,r-1,a,b-1,c,val,res,m);
         m[r]=x;
     }
     else
     {
        fun(l,r-1,a,b-1,c,val,res,m); 
     }
 }

int Solution::solve(vector<int> &A, int B, int C) {
    int val=0;
    for(auto x:A)
     val=(val^x);
    unordered_map<int,int>m;
    int res=0;
    fun(0,A.size()-1,A,B,C,val,res,m);
    return res;
}

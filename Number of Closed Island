class Solution {
    public:
    bool isValid(int x,int y,vector<vector<bool>>&visited)
     {  
        return (x>=0 && x<visited.size() && y>=0 && y<visited[0].size() && visited[x][y]==false);
     }
    void fun(int x,int y,bool &isClosed,vector<vector<bool>>&visited,vector<vector<int>>&grid)
     {    static int a[]={0,0,-1,1};
          static int b[]={-1,1,0,0};
          visited[x][y]=true;
          if(x==0 || (x==grid.size()-1) || y==0 || (y==grid[0].size()-1)) //if any [1] cell that is in first and last row and column
             isClosed=false;  //  then that entire isLand is not closed
          for(int k=0;k<4;++k)
          {   if(isValid(x+a[k],y+b[k],visited)==true && grid[x+a[k]][y+b[k]]==1)
               {   fun(x+a[k],y+b[k],isClosed,visited,grid); }
          }
     }
    int closedIslands(vector<vector<int>>& grid, int m, int n) { // m:rows  n:column
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        int res=0;
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            { if(visited[i][j]==false && grid[i][j]==1)
                 {  bool isClosed=true;
                    fun(i,j,isClosed,visited,grid);
                    if(isClosed==true)
                      ++res;
                 }
            }
        }
        return res;
    }
};

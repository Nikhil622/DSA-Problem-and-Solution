class Solution
{ 
  public:
    // long long max(long long x,long long y)
    // {   if(x<y)
    //       return y;
    //     else
    //       return x;
    // }
    // long long fun(int idx,int n,int k,int *a,vector<long long>&v,unordered_map<string,long long int>&m)
    //  {   if(idx==n)
    //       return 0;
    //      if(k==1)
    //       return v[n-1]-v[idx]+a[idx];
    //      string x=to_string(idx)+" "+to_string(k);
    //      if(m.find(x)!=m.end())
    //       return m[x];
    //      long long res=INT_MAX;
    //      long long sum=0;
    //      for(int i=idx;i<n;++i)
    //      {  sum+=a[i];
    //         res=min(res,max(sum,fun(i+1,n,k-1,a,v,m))); 
    //      }
    //      return m[x]=res;
    //  }
    // long long minTime(int arr[], int n, int k) // Time Complexity: O(k*n*n) Space Complexity: O(k*n)
    // {  vector<long long>v(n);
    //   v[0]=arr[0];
    //   for(int i=1;i<n;++i)
    //      v[i]=v[i-1]+arr[i];
    //   unordered_map<string,long long>t;
    //   return fun(0,n,k,arr,v,t); 
    // }
    
    bool isPossible(long long x,int *arr,int n,int k)
      {   long long curr=0; 
          for(int i=0;i<n;++i)
           {  if(x<arr[i])
                return false;
              if(curr+arr[i]<=x)
                curr=curr+arr[i];
              else
              {  curr=arr[i];
                 k=k-1;
                 if(k==0)
                  return false;
              }
           }
           return true;
      }
    long long minTime(int arr[], int n, int k)  // Time Complexity: (n* log(sum_arr)
    {  long long sum=0,mx=LLONG_MIN;
       for(int i=0;i<n;++i)
       {   sum+=arr[i];
           mx=max(mx,(long long)arr[i]);
       }
       if(k==1 || n==1)
        return sum;
       long long l=mx,r=sum;
       long long res=LLONG_MAX;
       while(l<=r)
       {   long long mid=l+(r-l)/2;
           if(isPossible(mid,arr,n,k)==true)  
            {    res=min(res,mid);
                 r=mid-1;
            }
           else
             l=mid+1;
       }
       return res;
    }
};

// Checking if edge between curr node and its parent node is critical or not
// Edges which are not visited : - They are not critical edges : Because they these node can be visited through their respective parent
// Critical Edges: After removing those edges : Total conntected component increased

class Solution {
public:
    static bool comp(vector<int>v1,vector<int>v2)
      {
          if(v1[0]==v2[0])
            return v1[1]<v2[1];
          else
            return v1[0]<v2[0];
      }
     
    void fun(int s,int parent,int &d,vector<int>&disc,vector<int>&low,vector<bool>&visited,vector<int>*adj,vector<vector<int>>&res)
	 {
	     visited[s]=true;   
	     disc[s]=d;
	     low[s]=d;
	     for(int x:adj[s])
	     { if(visited[x]==false)
	        {
	           fun(x,s,++d,disc,low,visited,adj,res);
	        } 
	     }
	     if(parent==-1)
	       return;
	     for(int x:adj[s])
	     { if(x!=parent && low[x]<low[s])
	         low[s]=low[x]; 
	     }
	     if(disc[parent]<low[s])
	      {  if(parent<s)
	           res.push_back({parent,s});
	         else
	           res.push_back({s,parent});
	      }
	 }
	vector<vector<int>>criticalConnections(int V, vector<int> adj[]){
	    vector<int>discovery(V);
	    vector<int>lowest_reacheable_node(V);
	    vector<bool>visited(V,false);
	    vector<vector<int>>res;
	    int d=0;
	    fun(0,-1,d,discovery,lowest_reacheable_node,visited,adj,res);
	    sort(res.begin(),res.end(),comp);
	    return res;
	}
};

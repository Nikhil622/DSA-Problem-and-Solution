class Solution {
    int N;
    public:
        int fun(int s,int c,vector<int>&color,vector<int>adj[])
        { color[s]=c;
          int res=1;
          for(int x:adj[s])
          {  if(color[x]==-1)
               res+=fun(x,c,color,adj);
          }
          return res;
        }
        int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
            int n=graph.size();
            vector<int>adj[n];
            this->N=n;
            for(int i=0;i<n;++i)
            {  for(int j=0;j<n;++j)
                {  if(graph[i][j]==1)
                    {  adj[i].push_back(j);
                       adj[j].push_back(i);
                    }
                }
            }
           vector<int>color(n,-1);
           int c=0;
           unordered_map<int,int>m; // Stores total nodes with same color
           for(int i=0;i<n;++i)
           {   if(color[i]==-1)
               {   m[c]=fun(i,c,color,adj); 
                   ++c;
               }
           }
           unordered_map<int,vector<int>>M;
           for(int x:initial)
             M[color[x]].push_back(x);  // Stores nodes having same color and initially infected

           int res=INT_MAX,ans=INT_MIN;
           for(auto x:M)
           { if(x.second.size()==1)               // Maxium connected components in having unique color: i.e. Only one node : in initially infected components has color x.first
               {  if(ans<m[x.first])             // Else : If more than two nodes have same color in initially infected nodes, then if we remove any one of those nodes from initially infected
                   {   ans=m[x.first];           // nodes it will not impact final total infected nodes because other initially infected nodes in that color group 
                       res=x.second[0];          // will eventually infected all node in that color group 
                   }
                  else if(m[x.first]==ans && x.second[0]<res)
                    res=x.second[0];
               }
           } 
           
           if(res==INT_MAX) // No node is unique :
           { int val=INT_MAX;
             for(int x:initial)
               val=min(val,x);
             return val;
           }
          return res;
        }
};

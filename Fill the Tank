class Solution {
    long long m;
public:
    long long max(long long a,long long b)
      {   if(a<b)
            return b;
          return a;
      }
    long long fun(int s,int p,int cap[],vector<int>adj[])
     {   
         long long t=-1,res=cap[s+1], n=adj[s].size();
    
         for(int x:adj[s])
           {   if(x!=p)
                {   auto z=fun(x,s,cap,adj);
                    if(z==-1)
                      return -1;
                    t=max(t,z);
                }
           }
         if(p!=-1)
           n=n-1;
         if(t!=-1)
            res+=t*n;
         if(res<=m)
          return res;
         return -1;
     }
    long long minimum_amount(vector<vector<int>>&Edge, int n, int s, int *cap){
       vector<int>adj[n];
       this->m=1e18;
       for(int i=0;i<n-1;++i)
         {   adj[Edge[i][0]].push_back(Edge[i][1]);
             adj[Edge[i][1]].push_back(Edge[i][0]);
         }
      return fun(s-1,-1,cap,adj);
     }
};

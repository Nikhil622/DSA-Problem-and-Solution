class Solution
{
    public:
    bool DFS(int s,int length,vector<int>*adj,vector<bool>&visited,int n)
    {    if(length==n)
            return true;
          visited[s]=true;
          for(auto x:adj[s])
          {  if(visited[x]==false)
               {  bool t=DFS(x,length+1,adj,visited,n);
                  if(t==true)
                    return true;
               }
          }
          visited[s]=false;
          return false;
    }
    bool check(int v,int e,vector<vector<int>> Edges)
    {   vector<int>adj[v];
        for(auto x:Edges)
        {  adj[x[0]-1].push_back(x[1]-1);
           adj[x[1]-1].push_back(x[0]-1); 
        }
        vector<bool>visited(v,false);
        int length=1;
        for(int s=0;s<v;++s)  // Starting checking form s as a start node
        {  if(DFS(s,length,adj,visited,v)==true)
              return true;
        }
        return false;
    }
};

class Solution{
public:
    void fun(int i,int j,int &res,int m,int n,vector<vector<int>>&t,vector<vector<int>>&mat)
     {  
         if(j==n)
         {  i=i+1;
            j=0;
         }
         if(i==m)
           return;
         if(i==0 || j==0)
           t[i][j]=mat[i][j];
         else{
             if(mat[i][j]==1)
              t[i][j]=min(t[i-1][j],min(t[i][j-1],t[i-1][j-1]))+1;
             else
              t[i][j]=0;
         }
         res=max(res,t[i][j]);
         fun(i,j+1,res,m,n,t,mat); 
     }
    int maxSquare(int m, int n, vector<vector<int>>&mat){
        vector<vector<int>> t(m,vector<int>(n));
        int res=0;
        fun(0,0,res,m,n,t,mat);
        return res;
    }
};


class Solution{
public:
    int maxSquare(int m, int n, vector<vector<int>>&mat){
        vector<vector<int>> t(m,vector<int>(n));
        int res=0;
        for(int i=0;i<m;++i)
          t[i][0]=mat[i][0];
        for(int j=0;j<n;++j)
          t[0][j]=mat[0][j];
        for(int i=1;i<m;++i)
        {
           for(int j=0;j<n;++j)
           {  if(mat[i][j]==1)
               t[i][j]=min(t[i-1][j-1],min(t[i-1][j],t[i][j-1]))+1;
              else
               t[i][j]=0;
              res=max(res,t[i][j]);
           }
        }
        return res;
    }
};

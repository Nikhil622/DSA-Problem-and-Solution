class Solution {
public:
    bool fun(int s,vector<int>&dist,vector<bool>&recur,vector<bool>&visited,vector<pair<int,int>>*adj)
      {
          visited[s]=true;
          recur[s]=true;
          for(auto x:adj[s])
          {  if(recur[x.first]==false)
              {  dist[x.first]=dist[s]+x.second;
                 bool t=fun(x.first,dist,recur,visited,adj);  
                 if(t==true)
                  return true;
              }
             else //if(recur[x.first]==true)
             {  if(dist[s]+x.second<dist[x.first])
                   return true;
             }
          }
          recur[s]=false;
          return false;
      }
	int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	   vector<pair<int,int>>adj[n];
	   for(auto x:edges)
	   {
	       adj[x[0]].push_back({x[1],x[2]});
	   }
	   vector<int>dist(n,-1);
	   vector<bool>recursive(n,false);
	   vector<bool>visited(n,false);
	   for(int i=0;i<n;++i)
	   {  if(visited[i]==false)
	       {  bool x=fun(i,dist,recursive,visited,adj);
	          if(x==true)
	            return 1;
	       }
	   }
	   return 0;
	}
};

class Solution {
    int t;
  public:
    int fun(int s,int p,vector<int>&disc,vector<int>&low,vector<int>adj[])
     {   disc[s]=low[s]=++t;
         int child=0;
         for(int x:adj[s])
          {  if(disc[x]==-1)
                {  ++child;
                   if(fun(x,s,disc,low,adj)==1)
                     return 1;
                   low[s]=min(low[s],low[x]);
                   if(p!=-1 && disc[s]<=low[x])
                     return 1;
                }
             else if(p!=x)
                low[s]=min(low[s],disc[x]);
          }
         if(p==-1 && 1<child)
           return 1;
         else
           return 0;
     }
    int solve(int s,vector<bool>&visited,vector<int>*adj)
     {  visited[s]=true;
        int res=1;
        for(int x:adj[s])
        {  if(visited[x]==false)
             res+=solve(x,visited,adj);
        }
        return res;
     }
    int biGraph(int a[], int n, int e) {
      this->t=0;
      vector<int>adj[n];
      for(int i=0;i<2*e;i+=2)
       {  adj[a[i]].push_back(a[i+1]);
          adj[a[i+1]].push_back(a[i]);
       }
      vector<bool>visited(n,false);
      if(solve(0,visited,adj)<n)
        return 0;
      vector<int>disc(n,-1),low(n,-1);
      int res=0;
      for(int i=0;i<n;++i)
      { if(disc[i]==-1 && fun(i,-1,disc,low,adj)==1)
            return 0;
      }
      return 1;
    }
};

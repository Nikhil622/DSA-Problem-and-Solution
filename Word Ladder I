class Solution {
public:
    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
         if(startWord==targetWord)
           return 0;
         unordered_set<string>s;
         for(auto &x:wordList)
           s.insert(x);
         if(s.find(targetWord)==s.end())
            return 0;
         queue<string>q;
         q.push(startWord);
         int level=0,n=startWord.size();
         while(q.empty()==false)
         {  ++level;
            int curr_size=q.size();
            for(int i=0;i<curr_size;++i)
            {  string word=q.front();
               q.pop();
               for(int pos=0;pos<n;++pos)  // n : word_Size 
                {   char original_char=word[pos];
                  for(char ch='a';ch<='z';++ch)
                   {   word[pos]=ch;
                       if(word==targetWord)
                          return level+1;
                       if(s.find(word)==s.end())
                         continue;
                       s.erase(word);
                       q.push(word);
                   }
                   word[pos]=original_char;
                }
            }
         }
        return 0;
    }
};

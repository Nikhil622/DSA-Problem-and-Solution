void fun(int &idx,int h,Node* &root,int *pre,int I,int H)
 {  if(I<idx || H<h)
       return;
    root=new Node(pre[idx++]);
    fun(idx,h+1,root->left,pre,I,H);
    fun(idx,h+1,root->right,pre,I,H);
 }
 
 void solve(int &idx,int h,Node* &root,int *pre,int I,int H)
 {  if(I<idx || H<h)
       return;
    root=new Node(pre[idx++]);
    solve(idx,h+1,root->right,pre,I,H);
    solve(idx,h+1,root->left,pre,I,H);
 }
 
Node* constructBinaryTree(int pre[], int preMirror[], int n)
{   
    int m=n/2; // Total nodes present in left and right subtree
    Node* root=new Node(pre[0]);
    int h=log10(n+1)/log10(2); // height of full binary tree
    int idx=1,i=1;
    fun(idx,2,root->left,pre,n/2,h);
    solve(i,2,root->right,preMirror,n/2,h);
    return root;
}

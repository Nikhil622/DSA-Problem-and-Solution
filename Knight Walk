class Solution {
public:
    int fun(vector<int>&start,vector<int>&end,int n)
     {   
          static int a[]={-1,-2,-2,-1,1,2,2,1};
          static int b[]={-2,-1,1,2,2,1,-1,-2};
          vector<vector<int>>dist(n,vector<int>(n,INT_MAX));
           
          dist[start[0]-1][start[1]-1]=0;
          queue<pair<int,int>>q;
          q.push({start[0]-1,start[1]-1});
          while(q.empty()==false)
          {  auto p=q.front();
             q.pop();
             for(int k=0;k<8;++k)
             {  int x=p.first+a[k],y=p.second+b[k];
                 if(x>=0 && x<n && y>=0 && y<n && dist[p.first][p.second]+1<dist[x][y])
                   {  dist[x][y]=dist[p.first][p.second]+1;
                      q.push({x,y});
                   }
             }
          }
          return dist[end[0]-1][end[1]-1];
     }
	int minStepToReachTarget(vector<int>&start, vector<int>&end, int n)
	{
	    return fun(start,end,n);
	}
};

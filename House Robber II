// class Solution {
//     int n;
//     unordered_map<string,int>m;
// public:
//     int fun(int idx,int x,int endNode,vector<int>&v)
//     {   if(idx==-1)
//           return 0;
//         string s=to_string(idx)+" "+to_string(x)+" "+to_string(endNode);
//         if(m.find(s)!=m.end())
//             return m[s];
//         if(idx==0)
//         {  if(x==0 && endNode==0)
//               return m[s]=v[0];
//            return m[s]=0;
//         }
//         if(x==0)
//           return m[s]=max(v[idx]+fun(idx-1,!x,endNode,v),fun(idx-1,x,endNode,v));
//         else
//           return m[s]=fun(idx-1,!x,endNode,v);
//     }
//     int rob(vector<int>& v) {
//         n=v.size();
//         m.clear();
//         int x=v[n-1]+fun(n-2,1,1,v),y=fun(n-2,0,0,v);
//         return max(x,y);
//     }
// };

class Solution {
    int n;
    vector<vector<vector<int>>>t;
public:
    int fun(int idx,int x,int endNode,vector<int>&v)
    {   if(idx==-1)
          return 0;
        if(t[idx][x][endNode]!=-1)
            return t[idx][x][endNode];
        if(idx==0)
        {  if(x==0 && endNode==0)
              return t[idx][x][endNode]=v[0];
           return t[idx][x][endNode]=0;
        }
        if(x==0)
          return t[idx][x][endNode]=max(v[idx]+fun(idx-1,!x,endNode,v),fun(idx-1,x,endNode,v));
        else
          return t[idx][x][endNode]=fun(idx-1,!x,endNode,v);
    }
    int rob(vector<int>& v) {
        n=v.size();
        t.clear();
        t=vector<vector<vector<int>>>(n,vector<vector<int>>(2,vector<int>(2,-1)));
        int x=v[n-1]+fun(n-2,1,1,v),y=fun(n-2,0,0,v);
        return max(x,y);
    }
};
